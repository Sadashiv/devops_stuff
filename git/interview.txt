how to clone from other server og linux
git clone user@ip:/path_to_repo

How to checkout particular folder from given branch during the clone

mkdir spares
cd sparse/
git init
git remote add origin git@thub.com:sadashiv/linux_user_mgmt
git config core.sparseCheckout true
echo "task" >> .git/info/sparse-checkout
git pull origin master

what is the differance between pull request and merge request
 -> Merge or pull requests are created in a git management application and ask an assigned person to merge two branches.
    Tools such as GitHub and Bitbucket choose the name pull request since the first manual action would be to pull the feature branch.
    Tools such as GitLab and Gitorious choose the name merge request since that is the final action that is requested of the assignee.
    In this article we'll refer to them as merge requests.

what is the add does and what are staging steps
 -> git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging
    area (a.k.a. the index), thus preparing them to be included in the next git commit . Any files matching the patterns
    in the . gitignore file will be ignored by git add .

 -> The git add command adds a change in the working directory to the staging area. It tells Git that you want to include
    updates to a particular file in the next commit. However, git add doesn't really affect the repository in any
    significant way—changes are not actually recorded until you run git commit.


Let us say i fixed some issue and pushed arised another issue
how to revert code base

git revert <commitid>

clone = init + remote + fetch + checkout
git show :3:README.md #Show 3rd index

git merge vs pull vs rebase

git pull == git fetch && git merge

git merge creates extra commit with local commit and remote commit id referance
merge is nicebeacuse it's non-destructive operation
  If master is very active, this can pollute your feature branch’s history quite a bit.
  While it’s possible to mitigate this issue with advanced git log options,
  it can make it hard for other developers to understand the history of the project.


git rebase doesn't create extra commit, instead move commit of one branch on top of the other.
linear history but it's destructive operatiob.

git rebase -i master(interactive and commits that are to be moved)

git push origin --delete merg_request or git push origin :merg_request

normal init repo vs bare init

 Shared repostory to be created  as bare repo.
 Conventionally, repositories initialized with the --bare flag end in .git
 The --bare flag creates a repository that doesn’t have a working directory,

 git init repo
 Initialized empty Git repository in /home/sadashiv/interview_questions/repo/.git/

 ls repo/.git/
 branches  config  description  HEAD  hooks  info  objects  refs

 git init repobare.git --bare
 Initialized empty Git repository in /home/sadashiv/interview_questions/repobare.git/
 ls repobare.git/
 branches  config  description  HEAD  hooks  info  objects  refs


git worktree(work on many things parallel for same repo with multiple work environment and multiple branch)
 git worktree add -b bugfix ./bugfixfolder master
 Preparing ./bugfixfolder (identifier bugfixfolder)
 HEAD is now at b696249 Merge branch 'master' of https://github.com/Sadashiv/interview_questions
 cd ./bugfixfolder/
 git branch
 * bugfix
   master
   sada
 git remote -v
 origin	https://github.com/Sadashiv/interview_questions (fetch)
 origin	https://github.com/Sadashiv/interview_questions (push)

 git worktree list
 /home/sadashiv/interview_questions               b696249 [master]
 /home/sadashiv/interview_questions/bugfixfolder  b696249 [bugfix]
 git worktree remove bugfixfolder

  or  git worktree prune


git reset(soft,hard,mixed)
soft is used to nothing operation in local

git reset --soft nothing removed with staging index
git reset --hard dangerous to do and revert all local changes
git reset --mixed remove changes staged and come back with file as untracked
