Jenkins
=======

Jenkins Continuous Integration(CI) and Continuous Delivery(CD)

Jenkins is fork of the original Hudson project
Why is the success ball is in Blue color

Jenkins Opens Source
Jenkins Enterprise(Cloud bees)

LTS vs other versions.

Jenkins installation
Prerequiste
JRE(Java runtime environment)
Windows: https://www.jenkins.io/download/thank-you-downloading-windows-installer-stable/

Linux: 
Install system level
sudo apt-get install jenkins -y
sudo yum install jenkins -y

Deploy via tomcat

cd /opt
wget -c https://downloads.apache.org/tomcat/tomcat-9/v9.0.41/bin/apache-tomcat-9.0.41.tar.gz
mv apache-tomcat-9.0.41 tomcat
cd tomcat/
./bin/startup.sh
cd webapps/
wget -c https://get.jenkins.io/war-stable/2.263.1/jenkins.war
cd /opt/tomcat
./bin/shutdown.sh 
./bin/startup.sh


http://IP:PORT/jenkins

Run/Install via command line.
 #!/bin/bash
export JENKINS_HOME=/home/sadashiv/jenkins
/usr/bin/java -jar jenkins.war -Dmail.smtp.localhost=stmp.gmail.com --httpPort=8888 --logfile=/home/sadashiv/jenkins/jenkins.log --daemon
echo $JENKINS_HOME

Jenkins Access:
Default access Anonymous

Delegate to servlet container
Jenkins own user database
LDAP
Unix user/group database
None


Easy to use
 Great extensibility
 Support different version control systems
 Code quality metrics
 Build notifiers
 UI customization

Plugins Installation
Around 1000 plugins are available
Plugins installation

Terminology
Job - A unit of work for project
View - User defined collection of jobs or a workflow
Master- The central jenkins master, does job scheduling
Slave - Executes one or more jobs within slots(executors)
Workspace - Working are where a job is carried out
Plugin - User defined collection of jobs or workflow

Jenkins Master and Slave Architecture
Image

What is Continuous Integration
Detects  changes in subversion performs tasks repeatedly(Build, Test, Deploy, Test Package)

If the build fails send email to respective Dev team
Image with workflow

JobConfigHistory
Disk Usage
Email-ext
Parameterized Trigger

Jenkins Pipeline

History of Jenkins
Jenkins installation
Jenkins Access and plugin installation
Terminology
Jenkins Master and Slave Architecture
Jenkins Job creation
Jenkins piepline


Code: Pipelines are implemented in code and typically checked into source control, giving teams the ability to edit,
review, and iterate upon their delivery pipeline.

Durable: Pipelines can survive both planned and unplanned restarts of the Jenkins controller.

Pausable: Pipelines can optionally stop and wait for human input or approval before continuing the Pipeline run.

Versatile: Pipelines support complex real-world CD requirements, including the ability to fork/join, loop, and perform work in parallel.

Extensible: The Pipeline plugin supports custom extensions to its DSL footnote:dsl:[] and multiple options for integration with other plugins.

Two type of pipelines
Delartive - Writing Jenkinsfile and placing into the version control
Scripted - Writing it in the job no version control job lost script also lost, tedious maniantain

agent is block in case of declartive to define which agent/label you want to run
node is block in case of declartive to define which node/label you want to run

$JENKINS_HOME is where all Jenkins-based installations store configuration, build logs, and artifacts.

Plugins installed
github
Join trigger
Trigger remote jenkin job
Send email Ext
sonarqube
Trigger/call builds on other projects
Disk Usage
Job Config History
Mask password
Rebuilder
Workspace cleanup

what is the key difference between Declarative pipeline and scripted pipeliine


The key difference between Declarative pipeline and Scripted pipeline would be with respect to their syntaxes and their flexibility.

Declarative pipeline is a relatively new feature that supports the pipeline as code concept. It makes the pipeline code easier to read and write. This code is written in a Jenkinsfile which can be checked into a source control management system such as Git.

Whereas, the scripted pipeline is a traditional way of writing the code. In this pipeline, the Jenkinsfile is written on the Jenkins UI instance.

Though both these pipelines are based on the groovy DSL, the scripted pipeline uses stricter groovy based syntaxes because it was the first pipeline to be built on the groovy foundation. Since this Groovy script was not typically desirable to all the users, the declarative pipeline was introduced to offer a simpler and more optioned Groovy syntax.

The declarative pipeline is defined within a block labelled ‘pipeline’ whereas the scripted pipeline is defined within a ‘node’.

Structure and syntax of the Declarative pipeline:

The Agent is where the whole pipeline runs. Example, Docker. The Agent has following parameters:

any – Which mean the whole pipeline will run on any available agent.

none – Which mean all the stages under the block will have to declared with agent separately.

label –  this is just a label for the Jenkins environment

docker –  this is to run the pipeline in Docker environment.

The Declarative pipeline code will looks like this:

pipeline {
  agent { label 'node-1' }
  stages {
    stage('Source') {
      steps {
        git 'https://github.com/digitalvarys/jenkins-tutorials.git''
      }
    }
    stage('Compile') {
      tools {
        gradle 'gradle4'
      }
      steps {
        sh 'gradle clean compileJava test'
      }
    }
  }
}
Scripted Pipeline:

The scripted pipeline is a traditional way of writing the Jenkins pipeline as code. Ideally, Scripted pipeline is written in Jenkins file on web UI of Jenkins.

 Unlike Declarative pipeline, the scripted pipeline strictly uses groovy based syntax. Since this, The scripted pipeline provides huge control over the script and can manipulate the flow of script extensively.

This helps developers to develop advance and complex pipeline as code.

Structure and syntax of the scripted pipeline:

Node Block:

Node is the part of the Jenkins architecture where Node or agent node will run the part of the workload of the jobs and master node will handle the configuration of the job. So this will be defined in the first place as

node {
}
Stage Block:

Stage block can be a single stage or multiple as the task goes. And it may have common stages like

Cloning the code from SCM

Building the project

Running the Unit Test cases

Deploying the code

Other functional and performance tests.

So the stages can be written as mentioned below:

stage {
}
So, Together, the scripted pipeline can be written as mentioned below.

node ('node-1') {
  stage('Source') {
    git 'https://github.com/digitalvarys/jenkins-tutorials.git''
  }
  stage('Compile') {
    def gradle_home = tool 'gradle4'
    sh "'${gradle_home}/bin/gradle' clean compileJava test"
  }
}
Declarative Pipeline encourages a declarative programming model, whereas Scripted Pipelines follow a more imperative programming model.

Declarative type imposes limitations to the user with a more strict and pre-defined structure, which would be ideal  for simpler continuous delivery pipelines.

Scripted type has very few limitations that to with respect to structure and syntax that tend to be defined by Groovy,thus making it ideal for users with more complex requirements.

For more info you could refer to this blog: https://www.edureka.co/blog/jenkins-pipeline-tutorial-continuous-delivery

Reset password for jenkins admin
userSecurity true to false
restart jenkins and newly create/set password and take it store into old file, which is not good idea if the users already present

vim users/admin_15055734841704161659/config.xml
Take backup of old password hash and replace with new password hash
restart jenkins

Go to user and configure security settings and 
